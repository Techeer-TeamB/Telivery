version: "3"
services:

  frontend:
    build: 
      context: ./Telivery_FE 
    ports:
     - "3000:3000"
    container_name: frontend-con
    # volumes: 
    #   - 'our-vol:/app'
    restart: always
    image: run
    stdin_open: true

  backend:
    container_name: backend-con
    build: 
      context: ./Telivery_BE
#    restart: on-failure
    # depends_on:
    #   - mysqldb
    ports:
      - '8000:8000'
    # environment:
    #   spring.datasource.url: ""
    volumes:
      - ./Telivery_BE:/Telivery_BE
    # networks:
    #   - network-tier
    tty: true

  # rabbitmq:
  #   image : rabbitmq:3-management
  #   container_name: rabbitmq-con
  #   env_file :
  #     - ./envs/rabbitmq
  #   ports:
  #    - "5672:5672"
  #    - "15672:15672"
  #   volumes:
  #     - data_rabbitmq:/var/lib/rabbitmq
    
  #docker-compose 없이 사용할려면 #이미지설치 : docker pull rabbitmq:3-management
  #컨테이너 실행: docker run -v rabbitmq:/app -d -p 15672:15672 -p 5672:5672 --name  rabbitmq rabbitmq:3-management
  # db:
  #   image: mysql
  #   container_name: mysql-con
  #   ports:
  #     - "3306:3306"
  #   command:
  #     - --character-set-server=utf8mb4
  #     - --collation-server=utf8mb4_unicode_ci
  #   environment:
  #     MYSQL_ROOT_PASSWORD: 
  #   env_file :
  #     - ./envs/mysql
  #   volumes:
  #     - data_mysql:/var/lib/mysql
  
  #docker run --rm -d --name mysql-con -e MYSQL_ROOT_PASSWORD=162girls -v data_mysql:/var/lib/mysql mysql
  # docker exec -it rabbitmq-con bash  
  # docker exec -it mysql-con bash
  # mysql -u root -p

# volumes:
#   data_mysql:
#   data_rabbitmq:
     
#docker-compose up --build
#volume
#docker volume prune
# sudo curl -L “https://github.com/docker/compose/releases/download/2.2.3/docker-compose-$(uname -s)-$(uname -m)” -o /usr/local/bin/docker-compose
# docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password --name mysql-con -v /var/lib/docker/volumes/mysql/_data mysql:latest --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
